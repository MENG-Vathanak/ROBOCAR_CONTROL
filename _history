{"entries":[{"timestamp":1733191560854,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":223,"start2":223,"length1":66,"length2":44}]},{"type":"added","filename":"custom.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1733191585033,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"><block "],[1,"type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block "],[0,"type=\"de"]],"start1":77,"start2":77,"length1":16,"length2":65}]}]},{"timestamp":1733192388648,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":272,"start2":272,"length1":21,"length2":17}]}]},{"timestamp":1733192388789,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"47\" y=\"-11\"><statement name=\"HANDLER\"><block type=\"custom_foo\"><field name=\"e\">MyEnum.One</field><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"s\"><shadow type=\"text\"><field name=\"TEXT\">Hello</field></shadow></value></block></statement"],[1,"225\" y=\"20\""],[0,"></b"]],"start1":106,"start2":106,"length1":296,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    custom.foo(5, \"Hello\", MyEnum.One)"],[1,"\t"],[0,"\n})\n"]],"start1":24,"start2":24,"length1":46,"length2":9}]}]},{"timestamp":1733192400048,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":272,"start2":272,"length1":17,"length2":21}]}]},{"timestamp":1733194595035,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":272,"start2":272,"length1":21,"length2":17}]}]},{"timestamp":1733194628770,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"47"],[0,"\" y=\""],[-1,"0"],[1,"-11"],[0,"\"><s"]],"start1":106,"start2":106,"length1":15,"length2":18},{"diffs":[[0,"num."],[-1,"Two"],[1,"One"],[0,"</fi"]],"start1":192,"start2":192,"length1":11,"length2":11}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"num."],[-1,"Two"],[1,"One"],[0,")\n})"]],"start1":58,"start2":58,"length1":11,"length2":11}]}]},{"timestamp":1733194757512,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":272,"start2":272,"length1":17,"length2":21}]}]},{"timestamp":1733200058533,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":272,"start2":272,"length1":21,"length2":17}]}]},{"timestamp":1733208176440,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"\t"],[1,"    custom.foo(5, \"Hello\", MyEnum.Two)"],[0,"\n})\n"]],"start1":24,"start2":24,"length1":9,"length2":46}]}]},{"timestamp":1733208179236,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," y=\"0\"><"],[1,"statement name=\"HANDLER\"><block type=\"custom_foo\"><field name=\"e\">MyEnum.Two</field><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"s\"><shadow type=\"text\"><field name=\"TEXT\">Hello</field></shadow></value></block></statement><"],[0,"/block><"]],"start1":112,"start2":112,"length1":16,"length2":293}]}]},{"timestamp":1733208179241,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":272,"start2":272,"length1":17,"length2":21}]}]},{"timestamp":1733213653587,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"1"],[0,"0\" y=\""],[-1,"1"],[0,"0\"><"]],"start1":106,"start2":106,"length1":16,"length2":14}]}]},{"timestamp":1733214076052,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"1"],[0,"0\" y=\""],[1,"1"],[0,"0\"><"]],"start1":106,"start2":106,"length1":14,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"RoboCar"],[1,"custom"],[0,".ts\""]],"start1":234,"start2":234,"length1":15,"length2":14}]},{"type":"removed","filename":"custom.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"},{"type":"added","filename":"RoboCar.ts","value":"namespace SuperBit {\n    const PCA9685_ADD = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const PRESCALE = 0xFE\n    let initialized = false\n    \n    export enum enMotors {\n        M1 = 8,\n        M2 = 10,\n        M3 = 12,\n        M4 = 14\n    }\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf = pins.createBuffer(5);\n        buf[0] = LED0_ON_L + 4 * channel;\n        buf[1] = on & 0xff;\n        buf[2] = (on >> 8) & 0xff;\n        buf[3] = off & 0xff;\n        buf[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\n    }\n}\n"}]},{"timestamp":1733214687010,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0," = false"],[-1,"\n\n    "],[0,"\n    \n  "]],"start1":451,"start2":451,"length1":22,"length2":16}]}]},{"timestamp":1733214724067,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"RoboCar_Servo\"><field name=\"num\">RoboCar.enServo.S1</field><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" ma"],[1,"device_forever\" "],[0,"x=\""],[-1,"18"],[0,"0\" "],[-1,"label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement"],[1,"y=\"0\""],[0,"></b"]],"start1":87,"start2":87,"length1":321,"length2":35}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"RoboCar.Servo(RoboCar.enServo.S1, 0"],[1,"basic.forever(function () {\n\t\n}"],[0,")\n"]],"start1":0,"start2":0,"length1":37,"length2":33}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":273,"start2":273,"length1":21,"length2":17}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"mespace "],[-1,"RoboCar"],[1,"SuperBit"],[0," {\n    c"]],"start1":2,"start2":2,"length1":23,"length2":24},{"diffs":[[0,"    "],[-1,"export enum enServo {\n        S1 = 0,\n        S2,\n        S3,\n        S4,\n    }"],[0,"\n   "]],"start1":461,"start2":461,"length1":87,"length2":8},{"diffs":[[0,"f);\n"],[-1,"    }\n    function stopMotor(index: number) {\n        setPwm(index, 0, 0);\n        setPwm(index + 1, 0, 0);\n    }\n\n    //% blockId=RoboCar_Servo block=\"Servo(180°)|num %num|value %value\"\n    //% weight=97\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=180\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n"],[0,"    "]],"start1":2362,"start2":2362,"length1":570,"length2":8}]}]},{"timestamp":1733215097505,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><"]],"start1":104,"start2":104,"length1":14,"length2":16},{"diffs":[[0,"SLIDER\">"],[-1,"18"],[0,"0</field"]],"start1":351,"start2":351,"length1":18,"length2":16}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"S1, "],[-1,"18"],[0,"0)\n"]],"start1":30,"start2":30,"length1":9,"length2":7}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"   S1 = "],[-1,"2"],[1,"0"],[0,",\n      "]],"start1":491,"start2":491,"length1":17,"length2":17},{"diffs":[[0,"  S2"],[-1," = 3"],[0,",\n  "]],"start1":508,"start2":508,"length1":12,"length2":8},{"diffs":[[0,"  S3"],[-1," = 4"],[0,",\n  "]],"start1":520,"start2":520,"length1":12,"length2":8},{"diffs":[[0,"  S4"],[-1," = 5"],[0,",\n  "]],"start1":532,"start2":532,"length1":12,"length2":8}]}]},{"timestamp":1733215686331,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"2"],[0,"0\" y=\""],[-1,"2"],[0,"0\"><"],[1,"statement name=\"HANDLER\"><block type=\"RoboCar_Servo\"><field name=\"num\">RoboCar.enServo.S1</field><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"180\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">180</field></shadow></value></block></statement><"],[0,"/blo"]],"start1":104,"start2":104,"length1":20,"length2":306}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"RoboCar.Servo(RoboCar.enServo.S1, 180)"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":39}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":273,"start2":273,"length1":17,"length2":21}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"m);\n"],[1,"\n"],[0,"    }"],[-1,"\n\n    //% blockId=RoboCar_Servo2 block=\"Servo(270°)|num %num|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=270\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo2(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let newvalue = Math.map(value, 0, 270, 0, 180);\n        let us = (newvalue * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n    }\n\n    //% blockId=SuperBit_MotorRun block=\"Motor|%index|speed(-255~255) %speed\"\n    //% weight=93\n    //% speed.min=-255 speed.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function MotorRun(index: enMotors, speed: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        speed = speed * 16; // map 255 to 4096\n        if (speed >= 4096) {\n            speed = 4095\n        }\n        if (speed <= -4096) {\n            speed = -4095\n        }\n\n        let a = index\n        let b = index + 1\n\n        if (a > 10) {\n            if (speed >= 0) {\n                setPwm(a, 0, speed)\n                setPwm(b, 0, 0)\n            } else {\n                setPwm(a, 0, 0)\n                setPwm(b, 0, -speed)\n            }\n        }\n        else {\n            if (speed >= 0) {\n                setPwm(b, 0, speed)\n                setPwm(a, 0, 0)\n            } else {\n                setPwm(b, 0, 0)\n                setPwm(a, 0, -speed)\n            }\n        }\n\n    }\n"],[0,"\n}\n"]],"start1":3013,"start2":3013,"length1":1555,"length2":13}]}]},{"timestamp":1733216127462,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"   M1 = "],[-1,"0"],[1,"8"],[0,",\n      "]],"start1":593,"start2":593,"length1":17,"length2":17},{"diffs":[[0,"  M2 = 1"],[1,"0"],[0,",\n      "]],"start1":610,"start2":610,"length1":16,"length2":17},{"diffs":[[0,"   M3 = "],[-1,"8"],[1,"12"],[0,",\n      "]],"start1":626,"start2":626,"length1":17,"length2":18},{"diffs":[[0,"   M4 = "],[-1,"9"],[1,"14"],[0,"\n    }\n\n"]],"start1":643,"start2":643,"length1":17,"length2":18},{"diffs":[[0,"-4095\n        }\n"],[1,"\n"],[0,"        let a = "]],"start1":4031,"start2":4031,"length1":32,"length2":33},{"diffs":[[0,"      }\n"],[1,"\n"],[0,"    }\n"],[1,"\n"],[0,"}\n"]],"start1":4550,"start2":4550,"length1":16,"length2":18}]}]},{"timestamp":1733216705670,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ck><"],[-1,"block type=\"device_forever\" x=\"335\" y=\"191\"><statement name=\"HANDLER\"><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M1</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></statement></block><"],[0,"/xml"]],"start1":124,"start2":124,"length1":359,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n    RoboCar.MotorRun(RoboCar.enMotors.M1, 255)\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":78,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":273,"start2":273,"length1":21,"length2":17}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0," = index"],[1,"\n        let b = index + 1"],[0,"\n\n      "]],"start1":4057,"start2":4057,"length1":16,"length2":42},{"diffs":[[0,"  if (a "],[-1,"= "],[1,"> 1"],[0,"0) {\n   "]],"start1":4099,"start2":4099,"length1":18,"length2":19},{"diffs":[[0,"(speed >"],[1,"="],[0," 0) {\n  "]],"start1":4130,"start2":4130,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 1)\n            } else if (speed <"],[1,"setPwm(b, 0, 0)\n            } else {\n                setPwm(a, 0,"],[0," 0)"],[-1," {"],[0,"\n   "]],"start1":4193,"start2":4193,"length1":139,"length2":76},{"diffs":[[0,"     setPwm("],[-1,"a"],[1,"b"],[0,", 0, -speed)"]],"start1":4277,"start2":4277,"length1":25,"length2":25},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"pins.digitalWritePin(DigitalPin.P13, 1)"],[1,"    }"],[0,"\n   "]],"start1":4311,"start2":4311,"length1":51,"length2":19},{"diffs":[[0,"    "],[1,"else {\n"],[0,"        "],[-1,"pins.digitalWritePin(DigitalPin.P14,"],[1,"    if (speed >="],[0," 0)"],[1," {"],[0,"\n   "]],"start1":4331,"start2":4331,"length1":55,"length2":44},{"diffs":[[0,"            "],[-1,"} else {"],[1,"    setPwm(b, 0, speed)"],[0,"\n           "]],"start1":4372,"start2":4372,"length1":32,"length2":47},{"diffs":[[0," 0, "],[-1,"speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 0"],[1,"0)\n            } else {\n                setPwm(b, 0, 0)\n                setPwm(a, 0, -speed"],[0,")\n  "]],"start1":4433,"start2":4433,"length1":125,"length2":99}]}]},{"timestamp":1733217289938,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"bles><block "],[1,"type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block "],[0,"type=\"device"]],"start1":73,"start2":73,"length1":24,"length2":73},{"diffs":[[0," x=\""],[-1,"216"],[1,"335"],[0,"\" y=\"1"],[-1,"37"],[1,"91"],[0,"\"><s"]],"start1":155,"start2":155,"length1":19,"length2":19}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"number): void {\n"],[1,"\n"],[0,"        // 50hz:"]],"start1":2846,"start2":2846,"length1":32,"length2":33},{"diffs":[[0,"number): void {\n"],[1,"\n"],[0,"        // 50hz:"]],"start1":3301,"start2":3301,"length1":32,"length2":33},{"diffs":[[0,"  }\n"],[-1,"        setFreq(1000)\n"],[0,"    "]],"start1":3863,"start2":3863,"length1":30,"length2":8},{"diffs":[[0,"-4095\n        }\n"],[-1,""],[0,"        let a = "]],"start1":4028,"start2":4028,"length1":32,"length2":32},{"diffs":[[0,"= index\n"],[1,"\n"],[0,"        "]],"start1":4058,"start2":4058,"length1":16,"length2":17}]}]},{"timestamp":1733217887836,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"39"],[1,"216"],[0,"\" y=\""],[-1,"5"],[1,"13"],[0,"7\"><"]],"start1":106,"start2":106,"length1":16,"length2":18},{"diffs":[[0,"SLIDER\">"],[-1,"-"],[0,"255</fie"]],"start1":365,"start2":365,"length1":17,"length2":16},{"diffs":[[0,"ue><"],[-1,"next><block type=\"RoboCar_Servo\"><field name=\"num\">RoboCar.enServo.S1</field><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"180\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">180</field></shadow></value></block></next><"],[0,"/blo"]],"start1":398,"start2":398,"length1":271,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"M1, "],[-1,"-"],[0,"255)\n"],[-1,"    RoboCar.Servo(RoboCar.enServo.S1, 180)\n"],[0,"})\n"]],"start1":66,"start2":66,"length1":56,"length2":12}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":273,"start2":273,"length1":17,"length2":21}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"\n       "],[-1," //"],[0," setFreq"]],"start1":3864,"start2":3864,"length1":19,"length2":16},{"diffs":[[0,"    "],[-1,"if (index"],[1,"let a = index\n        if (a"],[0," = 0"]],"start1":4068,"start2":4068,"length1":17,"length2":35}]}]},{"timestamp":1733218485980,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"er\" x=\"3"],[-1,"7"],[1,"9"],[0,"\" y=\"57\""]],"start1":103,"start2":103,"length1":17,"length2":17},{"diffs":[[0,"255\""],[-1," precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M2</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\""],[0," lab"]],"start1":306,"start2":306,"length1":252,"length2":8},{"diffs":[[0,"d name=\"SLIDER\">"],[1,"-"],[0,"255</field></sha"]],"start1":355,"start2":355,"length1":32,"length2":33},{"diffs":[[0,"pe=\""],[-1,"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M3</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index"],[1,"RoboCar_Servo\"><field name=\"num"],[0,"\">Ro"]],"start1":415,"start2":415,"length1":303,"length2":39},{"diffs":[[0,"r.en"],[-1,"Motors.M4"],[1,"Servo.S1"],[0,"</fi"]],"start1":458,"start2":458,"length1":17,"length2":16},{"diffs":[[0,"ld><value name=\""],[-1,"speed"],[1,"value"],[0,"\"><shadow type=\""]],"start1":475,"start2":475,"length1":37,"length2":37},{"diffs":[[0,"tation min=\""],[-1,"-255"],[1,"0"],[0,"\" max=\""],[-1,"255"],[1,"180"],[0,"\" label=\"Spe"]],"start1":535,"start2":535,"length1":38,"length2":35},{"diffs":[[0,"ax=\"180\" label=\""],[-1,"Speed"],[1,"Value"],[0,"\" precision=\"0\">"]],"start1":551,"start2":551,"length1":37,"length2":37},{"diffs":[[0,"SLIDER\">"],[-1,"255"],[1,"180"],[0,"</field>"]],"start1":612,"start2":612,"length1":19,"length2":19},{"diffs":[[0,"k></"],[-1,"next></block></next></block></"],[0,"stat"]],"start1":669,"start2":669,"length1":38,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ors.M1, "],[1,"-"],[0,"255)\n   "]],"start1":62,"start2":62,"length1":16,"length2":17},{"diffs":[[0,"Car."],[-1,"MotorRun(RoboCar.enMotors.M2, 255)\n    RoboCar.MotorRun(RoboCar.enMotors.M3, 255)\n    RoboCar.MotorRun(RoboCar.enMotors.M4, 255"],[1,"Servo(RoboCar.enServo.S1, 180"],[0,")\n})"]],"start1":84,"start2":84,"length1":135,"length2":37}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":273,"start2":273,"length1":21,"length2":17}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"(index: "],[-1,"enMotors"],[1,"number"],[0,") {\n    "]],"start1":2481,"start2":2481,"length1":24,"length2":22},{"diffs":[[0,"dex, 0, 0);\n"],[1,"        setPwm(index + 1, 0, 0);\n"],[0,"    }\n\n    /"]],"start1":2516,"start2":2516,"length1":24,"length2":57},{"diffs":[[0,"         setPwm("],[-1,"index"],[1,"a"],[0,", 0, speed)\n    "]],"start1":4128,"start2":4128,"length1":37,"length2":33},{"diffs":[[0,"         setPwm("],[-1,"index"],[1,"a"],[0,", 0, -speed)\n   "]],"start1":4312,"start2":4312,"length1":37,"length2":33},{"diffs":[[0,"         setPwm("],[-1,"index"],[1,"a"],[0,", 0, speed)\n    "]],"start1":4482,"start2":4482,"length1":37,"length2":33},{"diffs":[[0,"italPin.P13, 0)\n"],[1,""],[0,"                "]],"start1":4551,"start2":4551,"length1":32,"length2":32},{"diffs":[[0,"   }"],[-1,"\n\n        if (index = 1) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P15, 0)\n                pins.digitalWritePin(DigitalPin.P16, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P15, 1)\n                pins.digitalWritePin(DigitalPin.P16, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 0)\n            }\n        }\n\n        if (index = 8) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P9, 0)\n                pins.digitalWritePin(DigitalPin.P10, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P9, 1)\n                pins.digitalWritePin(DigitalPin.P10, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P9, 0)\n                pins.digitalWritePin(DigitalPin.P10, 0)\n            }\n        }\n\n        if (index = 9) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P11, 0)\n                pins.digitalWritePin(DigitalPin.P12, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P11, 1)\n                pins.digitalWritePin(DigitalPin.P12, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P11, 0)\n                pins.digitalWritePin(DigitalPin.P12, 0)\n            }\n        }"],[0,"\n   "]],"start1":4642,"start2":4642,"length1":1784,"length2":8}]}]},{"timestamp":1733219117316,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"M4, "],[-1,"-"],[0,"255)"]],"start1":207,"start2":207,"length1":9,"length2":8}]}]},{"timestamp":1733219127921,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"37"],[0,"\" y=\""],[-1,"0"],[1,"57"],[0,"\"><s"]],"start1":106,"start2":106,"length1":15,"length2":17},{"diffs":[[0,"ue><"],[-1,"next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"RoboCar_MotorStopAll\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M1</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">-255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M2</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">-255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M3</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">-255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M4</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">-255</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"RoboCar_MotorStopAll\"><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next><"],[0,"/blo"]],"start1":1156,"start2":1156,"length1":1734,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"M4, "],[1,"-"],[0,"255"],[-1,")\n    basic.pause(5000)\n    RoboCar.MotorStopAll()\n    basic.pause(2000)\n    RoboCar.MotorRun(RoboCar.enMotors.M1, -255)\n    RoboCar.MotorRun(RoboCar.enMotors.M2, -255)\n    RoboCar.MotorRun(RoboCar.enMotors.M3, -255)\n    RoboCar.MotorRun(RoboCar.enMotors.M4, -255)\n    basic.pause(5000)\n    RoboCar.MotorStopAll()\n    basic.pause(2000"],[0,")\n})"]],"start1":207,"start2":207,"length1":345,"length2":12}]},{"type":"edited","filename":"RoboCar.ts","patch":[{"diffs":[[0,"ex ="],[-1,"="],[0," 0) {\n"],[1,""],[0,"    "]],"start1":4051,"start2":4051,"length1":15,"length2":14},{"diffs":[[0,"(index ="],[-1,"="],[0," 1) {\n  "]],"start1":4640,"start2":4640,"length1":17,"length2":16},{"diffs":[[0,"(index ="],[-1,"="],[0," 8) {\n  "]],"start1":5233,"start2":5233,"length1":17,"length2":16},{"diffs":[[0,"(index ="],[-1,"="],[0," 9) {\n  "]],"start1":5823,"start2":5823,"length1":17,"length2":16},{"diffs":[[0,")\n            }\n"],[1,""],[0,"        }\n    }\n"]],"start1":6378,"start2":6378,"length1":32,"length2":32},{"diffs":[[0,"   }"],[-1,"\n\n    //% blockId=RoboCar_MotorStopAll block=\"Motor Stop All\"\n    //% weight=91\n    //% blockGap=50\n    export function MotorStopAll(): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n\n        stopMotor(enMotors.M1);\n        stopMotor(enMotors.M2);\n        stopMotor(enMotors.M3);\n        stopMotor(enMotors.M4);\n\n    }"],[0,"\n}\n"]],"start1":6405,"start2":6405,"length1":349,"length2":7}]}]},{"timestamp":1733219664656,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ver\""],[-1," id=\"LO._f0oZo{~5b:+C9Un8\""],[0," x=\""]],"start1":102,"start2":102,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"{d.pk(8He}Zrk*s8-;N[\""],[0,"><fi"]],"start1":172,"start2":172,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"~oO,Vq3tEm])ywub9x*N\""],[0,"><mu"]],"start1":273,"start2":273,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"xh#.g`[I#gjEjT[xHTKc\""],[0,"><fi"]],"start1":416,"start2":416,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"+V@%9(QIo/`iR:FD#$x1\""],[0,"><mu"]],"start1":517,"start2":517,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"PJs-2IxJ6z4hG}Aj/m1W\""],[0,"><fi"]],"start1":674,"start2":674,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"J5/~XYA|bL{S{HA2$n*N\""],[0,"><mu"]],"start1":775,"start2":775,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"Ss?Hs=z~]*cC([Qt]Tr2\""],[0,"><fi"]],"start1":932,"start2":932,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"49m2,i,L-GlJn,EG9Oth\""],[0,"><mu"]],"start1":1033,"start2":1033,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"cqY7i}PdDe-|LsOwTc^@\""],[0,"><va"]],"start1":1185,"start2":1185,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"kpslA5`01uP.x*A}E*h3\""],[0,"><fi"]],"start1":1231,"start2":1231,"length1":34,"length2":8},{"diffs":[[0,"All\""],[-1," id=\"5[Ao#Zyv]/^B?}HgRDtL\""],[0,"><ne"]],"start1":1318,"start2":1318,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"!d;4/0OD.p~gLL*]sm$G\""],[0,"><va"]],"start1":1351,"start2":1351,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"FN$2|ObJV4=v.-!I#R:v\""],[0,"><fi"]],"start1":1397,"start2":1397,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"ENKRNv:Y#!*nn1wRp*yd\""],[0,"><fi"]],"start1":1481,"start2":1481,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"hYHIbYdrYRIOjxw6JX9b\""],[0,"><mu"]],"start1":1582,"start2":1582,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"ANDpf.VF=[dCVuf-jZFc\""],[0,"><fi"]],"start1":1740,"start2":1740,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"RJ%M4N}YbC6vD]0?rmgR\""],[0,"><mu"]],"start1":1841,"start2":1841,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"w6Hi]|cJAATG|0;ug^!k\""],[0,"><fi"]],"start1":1985,"start2":1985,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"XPPAT::Gb?!=EA,FSEz+\""],[0,"><mu"]],"start1":2086,"start2":2086,"length1":34,"length2":8},{"diffs":[[0,"Run\""],[-1," id=\"3nFN5J{MVCjGH(Qod)Wr\""],[0,"><fi"]],"start1":2230,"start2":2230,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"]Z-t473qEDpw+]u`6X?f\""],[0,"><mu"]],"start1":2331,"start2":2331,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"8wN=Y@!Ni5uQ*`R{!yIV\""],[0,"><va"]],"start1":2470,"start2":2470,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"~-]oy(va-U=zC^HMDmie\""],[0,"><fi"]],"start1":2516,"start2":2516,"length1":34,"length2":8},{"diffs":[[0,"All\""],[-1," id=\"yrgf=$RkTT+c{r9+M|]J\""],[0,"><ne"]],"start1":2603,"start2":2603,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"cCzsGXCw55E-O5X^em/7\""],[0,"><va"]],"start1":2636,"start2":2636,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"LTGQfvn2[s+a~1=L;0a,\""],[0,"><fi"]],"start1":2682,"start2":2682,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":253,"start2":253,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1733191560853,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1733194595035,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"47\" y=\"-11\"><statement name=\"HANDLER\"><block type=\"custom_foo\"><field name=\"e\">MyEnum.One</field><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"s\"><shadow type=\"text\"><field name=\"TEXT\">Hello</field></shadow></value></block></statement></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1733200058533,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"custom_foo\"><field name=\"e\">MyEnum.Two</field><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"s\"><shadow type=\"text\"><field name=\"TEXT\">Hello</field></shadow></value></block></statement></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1733208176440,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"custom_foo\"><field name=\"e\">MyEnum.Two</field><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><value name=\"s\"><shadow type=\"text\"><field name=\"TEXT\">Hello</field></shadow></value></block></statement></block></xml>","main.ts":"basic.forever(function () {\n    custom.foo(5, \"Hello\", MyEnum.Two)\n})\n","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1733213653587,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"custom.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1733215588710,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"RoboCar_Servo\"><field name=\"num\">RoboCar.enServo.S1</field><value name=\"value\"><shadow type=\"math_number_minmax\"><mutation min=\"0\" max=\"180\" label=\"Value\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value></block></statement></block></xml>","main.ts":"RoboCar.Servo(RoboCar.enServo.S1, 0)\n","README.md":"","RoboCar.ts":"namespace RoboCar {\n    const PCA9685_ADD = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const PRESCALE = 0xFE\n    let initialized = false\n\n    export enum enServo {\n        S1 = 0,\n        S2,\n        S3,\n        S4,\n    }\n    \n    export enum enMotors {\n        M1 = 8,\n        M2 = 10,\n        M3 = 12,\n        M4 = 14\n    }\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf = pins.createBuffer(5);\n        buf[0] = LED0_ON_L + 4 * channel;\n        buf[1] = on & 0xff;\n        buf[2] = (on >> 8) & 0xff;\n        buf[3] = off & 0xff;\n        buf[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\n    }\n    function stopMotor(index: number) {\n        setPwm(index, 0, 0);\n        setPwm(index + 1, 0, 0);\n    }\n\n    //% blockId=RoboCar_Servo block=\"Servo(180°)|num %num|value %value\"\n    //% weight=97\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=180\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"RoboCar.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1733217443990,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block><block type=\"device_forever\" x=\"335\" y=\"191\"><statement name=\"HANDLER\"><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M1</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></statement></block></xml>","main.ts":"","README.md":"","RoboCar.ts":"namespace RoboCar {\n    const PCA9685_ADD = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const PRESCALE = 0xFE\n    let initialized = false\n\n    export enum enServo {\n        S1 = 2,\n        S2 = 3,\n        S3 = 4,\n        S4 = 5,\n    }\n    \n    export enum enMotors {\n        M1 = 0,\n        M2 = 1,\n        M3 = 8,\n        M4 = 9\n    }\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf = pins.createBuffer(5);\n        buf[0] = LED0_ON_L + 4 * channel;\n        buf[1] = on & 0xff;\n        buf[2] = (on >> 8) & 0xff;\n        buf[3] = off & 0xff;\n        buf[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\n    }\n    function stopMotor(index: number) {\n        setPwm(index, 0, 0);\n        setPwm(index + 1, 0, 0);\n    }\n\n    //% blockId=RoboCar_Servo block=\"Servo(180°)|num %num|value %value\"\n    //% weight=97\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=180\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n    }\n\n    //% blockId=RoboCar_Servo2 block=\"Servo(270°)|num %num|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=270\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo2(num: enServo, value: number): void {\n\n        // 50hz: 20,000 us\n        let newvalue = Math.map(value, 0, 270, 0, 180);\n        let us = (newvalue * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n    }\n\n    //% blockId=SuperBit_MotorRun block=\"Motor|%index|speed(-255~255) %speed\"\n    //% weight=93\n    //% speed.min=-255 speed.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function MotorRun(index: enMotors, speed: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        speed = speed * 16; // map 255 to 4096\n        if (speed >= 4096) {\n            speed = 4095\n        }\n        if (speed <= -4096) {\n            speed = -4095\n        }\n        let a = index\n\n        if (a = 0) {\n            if (speed > 0) {\n                setPwm(a, 0, speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 1)\n            } else if (speed < 0) {\n                setPwm(a, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P13, 1)\n                pins.digitalWritePin(DigitalPin.P14, 0)\n            } else {\n                setPwm(a, 0, speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 0)\n            }\n        }\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"RoboCar.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1733219313026,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"37\" y=\"57\"><statement name=\"HANDLER\"><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M1</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M2</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M3</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value><next><block type=\"SuperBit_MotorRun\"><field name=\"index\">RoboCar.enMotors.M4</field><value name=\"speed\"><shadow type=\"math_number_minmax\"><mutation min=\"-255\" max=\"255\" label=\"Speed\" precision=\"0\"></mutation><field name=\"SLIDER\">255</field></shadow></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"basic.forever(function () {\n    RoboCar.MotorRun(RoboCar.enMotors.M1, 255)\n    RoboCar.MotorRun(RoboCar.enMotors.M2, 255)\n    RoboCar.MotorRun(RoboCar.enMotors.M3, 255)\n    RoboCar.MotorRun(RoboCar.enMotors.M4, 255)\n})\n","README.md":"","RoboCar.ts":"namespace RoboCar {\n    const PCA9685_ADD = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const PRESCALE = 0xFE\n    let initialized = false\n\n    export enum enServo {\n        S1 = 2,\n        S2 = 3,\n        S3 = 4,\n        S4 = 5,\n    }\n    \n    export enum enMotors {\n        M1 = 0,\n        M2 = 1,\n        M3 = 8,\n        M4 = 9\n    }\n\n    function i2cwrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2ccmd(addr: number, value: number) {\n        let buf = pins.createBuffer(1)\n        buf[0] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cread(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n        if (!initialized) {\n            initPCA9685();\n        }\n        let buf = pins.createBuffer(5);\n        buf[0] = LED0_ON_L + 4 * channel;\n        buf[1] = on & 0xff;\n        buf[2] = (on >> 8) & 0xff;\n        buf[3] = off & 0xff;\n        buf[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\n    }\n    function stopMotor(index: enMotors) {\n        setPwm(index, 0, 0);\n    }\n\n    //% blockId=RoboCar_Servo block=\"Servo(180°)|num %num|value %value\"\n    //% weight=97\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=180\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo(num: enServo, value: number): void {\n        // 50hz: 20,000 us\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n    }\n\n    //% blockId=RoboCar_Servo2 block=\"Servo(270°)|num %num|value %value\"\n    //% weight=96\n    //% blockGap=10\n    //% num.min=1 num.max=4 value.min=0 value.max=270\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=20\n    export function Servo2(num: enServo, value: number): void {\n        // 50hz: 20,000 us\n        let newvalue = Math.map(value, 0, 270, 0, 180);\n        let us = (newvalue * 1800 / 180 + 600); // 0.6 ~ 2.4\n        let pwm = us * 4096 / 20000;\n        setPwm(num, 0, pwm);\n    }\n\n    //% blockId=SuperBit_MotorRun block=\"Motor|%index|speed(-255~255) %speed\"\n    //% weight=93\n    //% speed.min=-255 speed.max=255\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\n    export function MotorRun(index: enMotors, speed: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        // setFreq(1000)\n        speed = speed * 16; // map 255 to 4096\n        if (speed >= 4096) {\n            speed = 4095\n        }\n        if (speed <= -4096) {\n            speed = -4095\n        }\n        if (index = 0) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P13, 1)\n                pins.digitalWritePin(DigitalPin.P14, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 0)\n            }\n        }\n\n        if (index = 1) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P15, 0)\n                pins.digitalWritePin(DigitalPin.P16, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P15, 1)\n                pins.digitalWritePin(DigitalPin.P16, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P13, 0)\n                pins.digitalWritePin(DigitalPin.P14, 0)\n            }\n        }\n\n        if (index = 8) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P9, 0)\n                pins.digitalWritePin(DigitalPin.P10, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P9, 1)\n                pins.digitalWritePin(DigitalPin.P10, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P9, 0)\n                pins.digitalWritePin(DigitalPin.P10, 0)\n            }\n        }\n\n        if (index = 9) {\n            if (speed > 0) {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P11, 0)\n                pins.digitalWritePin(DigitalPin.P12, 1)\n            } else if (speed < 0) {\n                setPwm(index, 0, -speed)\n                pins.digitalWritePin(DigitalPin.P11, 1)\n                pins.digitalWritePin(DigitalPin.P12, 0)\n            } else {\n                setPwm(index, 0, speed)\n                pins.digitalWritePin(DigitalPin.P11, 0)\n                pins.digitalWritePin(DigitalPin.P12, 0)\n            }\n        }\n    }\n}\n","pxt.json":"{\n    \"name\": \"costum_block\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"RoboCar.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1733219931329}